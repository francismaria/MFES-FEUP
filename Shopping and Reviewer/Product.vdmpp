class Product

types
	public String = seq of char;
	public Float = real;
	public Sellers = set of User;
	
values

instance variables

	private ID : nat1;
	private name : String;
	private description : String;
	private price : Float;
	private sellers : Sellers := {};
	
	private static numberOfProducts : int := 0;
	
	inv ID <= numberOfProducts and ID > 0;
	
operations

	-- CONSTRUCTOR
	
	public Product: String * String * Float ==> Product
	Product(newName, newDescription, newPrice) ==
	(
		name := newName;
		description := newDescription;
		price := newPrice;
		numberOfProducts := numberOfProducts + 1;
		ID := numberOfProducts;
	)
	pre newName <> "" and newDescription <> "" and newPrice >= 0;

	
	-- ACCESSOR METHODS
	
	public getID: () ==> nat1
	getID() ==
	(
		return ID;
	);
	
	public getName: () ==> String
	getName() ==
	(
		return name;
	);
	
	public getDescription: () ==> String
	getDescription() == 
	(
		return description;
	);
	
	public getPrice: () ==> Float
	getPrice() ==
	(
		return price;
	);
	
	public getSellers: () ==> Sellers
	getSellers() ==
	(
		return sellers;
	);
	
	public static getNumberOfProducts: () ==> int
	getNumberOfProducts() ==
	(
		return numberOfProducts;
	);
	
	-- MODIFIER METHODS
	
	public changePrice: Float ==> ()
	changePrice(newPrice) ==
	(
		price := newPrice;
	)
	pre price <> newPrice;
	
	
	public addSeller: Seller ==> ()
	addSeller(newSeller) ==
	(
		sellers := sellers union {newSeller};
	);
	
	
functions
-- descontos

traces
-- TODO Define Combinatorial Test Traces here
end Product