class Seller is subclass of User

types
  public Products = set of Product;
  public ProductName = seq of char;

values


instance variables
	-- product set representing the inventory of the items the seller is selling.
	-- each product within the sellers product inventory is characterized by an ID.
	private products : map nat1 to Product := { |-> };
	
	-- var to keep track of the seller products IDS
	private productsIDs : nat1 := 1;
	
	
operations
	------------------------------------------
	-- CONSTRUCTOR
	------------------------------------------
	
	public Seller : String * String ==> Seller
	Seller(usernameExt, passwordExt) == 
	(
		User`User(usernameExt, passwordExt);
	);
	
	------------------------------------------
	-- ACCESSOR METHODS 
	------------------------------------------

	-- Get the product by its ID in the inventory.
	public getProduct: nat1 ==> Product
	getProduct(id) ==
	(
		return products(id);
	)
	pre id in set dom products;
	
	--returns the range of products in the map
	public getAllProducts: () ==> Products
	getAllProducts() ==
	(
		return rng products;
	);
	
	public getType: () ==> UserType
	getType() ==
	(
		return <SELLER>;
	);
	
	------------------------------------------
	-- MODIFIER METHODS
	------------------------------------------
	
	-- This function adds a new product to the seller's inventory.
	-- If the product already exists in the inventory then it just increments its quantity.
	-- Otherwise, it adds the new product to the inventory.
	public addNewProduct: Product ==> ()
	addNewProduct(newProduct) ==
	(	
		dcl existingProducts : set of Product := rng products, productExists : bool := false;
	
		for all p in set existingProducts do
			if newProduct.isEqual(p)
			then (
				p.incrementQuantity();
				productExists := true;
			);
			
		if productExists = false then (
			products := products munion { productsIDs |-> newProduct };
			productsIDs := productsIDs + 1;
		)
	);
	
	public sellProduct: nat1 ==> ()
	sellProduct(productID) ==
	(
		dcl product : Product := products(productID);
		products := products :-> {product};
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here

end Seller