class Shop

types
	public String = seq of char;
	public Users = set of User;
	public Products = set of Product;
	
values

instance variables
	private name : String;
	private registeredUsers : Users := {};
	private registeredProducts : map User`String to Products := {|->}; 
		
	-- fará sentido que só esteja um user logado de cada vez?? visto que é um modelo deste género, parace-me que sim
	-- desta forma, teria algo como
	private loggedUser : User;
	
operations
	------------------------------------------
	-- CONSTRUCTOR
	------------------------------------------
	
	public Shop: String ==> Shop
	Shop(shopName) ==
	(
		name := shopName;
	);
	
	------------------------------------------
	-- ACCESSOR METHODS
	------------------------------------------
	
	public getLoggedUser: () ==> User
	getLoggedUser() ==
	(
		return loggedUser;
	);
	
	public getRegisteredUsers: () ==> Users
	getRegisteredUsers() ==
	(
		return registeredUsers;
	);
	
	public getRegisteredProducts: () ==> map User`String to Products
	getRegisteredProducts() ==
	(
		return registeredProducts;
	);
	
	public getNumberOfProducts: () ==> int
	getNumberOfProducts() ==
	(
		return Product`getNumberOfProducts();
	);
	
	public getNumberOfSellers: () ==> int
	getNumberOfSellers() ==
	(
		return getNumberOfElements(<SELLER>);
	);
	
	public getNumberOfCostumers: () ==> int
	getNumberOfCostumers() ==
	(
		return getNumberOfElements(<COSTUMER>);
	);
	
	-- Gets the number of users of a certain type (SELLER or COSTUMER)
	private getNumberOfElements: User`UserType ==> int
	getNumberOfElements(elemsType) ==
	(
		dcl num : int := 0;
		
		for all user in set registeredUsers do
			if user.getType() = elemsType
			then num := num+1;
			
		return num;
	);
	
	------------------------------------------
	-- MODIFIER METHODS
	------------------------------------------
	
	public addNewUser: User ==> ()
	addNewUser(newUser) ==
	(
		registeredUsers := registeredUsers union {newUser};
	)
	pre newUser not in set registeredUsers
	post newUser in set registeredUsers;


	-- Updates all the products that exist in the shop
	-- It keeps all products listed with the respective association to the product's seller.
	public updateProducts: () ==> ()
	updateProducts() ==
	(
		for all user in set registeredUsers do
			if user.getType() = <SELLER>
			then (
					dcl seller : Seller := user, existsUserProducts : map User`String to Products := {|->};
					existsUserProducts := {user.getUsername()} <: registeredProducts;
					
					if existsUserProducts = {|->}
					then (
						registeredProducts := registeredProducts munion { seller.getUsername() |-> seller.getAllProducts() };
					)
					else (
						registeredProducts := registeredProducts ++ { seller.getUsername() |-> seller.getAllProducts() };
					)
			);
	);
	
	------------------------------------------
	-- AUTHORIZATION METHODS
	------------------------------------------
	
	public login: String * String ==> bool
	login(inputUsername, inputPassword) ==
	(
		for all user in set registeredUsers do
			if user.getUsername() = inputUsername
			then (
				if user.checkCredentials(inputPassword)
				then (
					loggedUser := user;
					return true
				)
				else return false
			);
		return false;
	);
	
	public logout: () ==> ()
	logout() ==
	(
		loggedUser.logOut();
	);
	
	public register: String * String * User`UserType ==> ()
	register(newUsername, newPassword, type) ==
	(
		if type = <SELLER>
		then (
			dcl newSeller : Seller := new Seller(newUsername, newPassword);
			self.addNewUser(newSeller);
		)
		else (
			dcl newCostumer : Costumer := new Costumer(newUsername, newPassword);
			self.addNewUser(newCostumer);
		)
	)
	pre type = <SELLER> or type = <COSTUMER>;
	
functions


traces 

end Shop