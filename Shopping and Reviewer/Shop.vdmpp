class Shop

types
	public String = seq of char;
	public Users = set of User;
	public Products = set of Product;
	
values

instance variables
	private name : String;
	private registeredUsers : Users := {};
	private registeredProducts : Products := {};
	
operations
	
	-- CONSTRUCTOR
	
	public Shop: String ==> Shop
	Shop(shopName) ==
	(
		name := shopName;
	);
	
	
	-- ACCESSOR METHODS
	
	public getRegisteredUsers: () ==> Users
	getRegisteredUsers() ==
	(
		return registeredUsers;
	);
	
	public getRegisteredProducts: () ==> Products
	getRegisteredProducts() ==
	(
		return registeredProducts;
	);
	
	public getNumberOfProducts: () ==> int
	getNumberOfProducts() ==
	(
		return Product`getNumberOfProducts();
	);
	
	public getNumberOfSellers: () ==> int
	getNumberOfSellers() ==
	(
		return getNumberOfElements(<SELLER>);
	);
	
	public getNumberOfCostumers: () ==> int
	getNumberOfCostumers() ==
	(
		return getNumberOfElements(<COSTUMER>);
	);
	
	private getNumberOfElements: User`UserType ==> int
	getNumberOfElements(elemsType) ==
	(
		dcl num : int := 0;
		
		for all user in set registeredUsers do
			if user.getType() = elemsType
			then num := num+1;
			
		return num;
	);
	
	
	-- MODIFIER METHODS
	
	public addNewUser: User ==> ()
	addNewUser(newUser) ==
	(
		registeredUsers := registeredUsers union {newUser};
	)
	pre newUser not in set registeredUsers
	post newUser in set registeredUsers;
	
	public addNewProduct: Product ==> ()
	addNewProduct(newProduct) ==
	(
		registeredProducts := registeredProducts union {newProduct};
	)
	pre  newProduct not in set registeredProducts
	post  newProduct in set registeredProducts
	
functions

traces

end Shop