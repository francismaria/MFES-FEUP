class User
--abstract class

types
	public String = seq of char;
	public Float = real;
	
	-- sets the type of user: the seller and the costumer
	public static UserType = <SELLER> | <COSTUMER>;

values
	--constantes
	
instance variables
	private ID : nat1 := 1;
	private username : String;
	private password : String;
	private loggedIn : bool;
	private rating : Float := 0;
	private reviews : set of Review := {};
	
	private static numberOfUsers : int := 0; 
	
	inv ID <= numberOfUsers and ID > 0;
	inv rating >= 0 and rating <= 5;
	
operations
	------------------------------------------
	-- CONSTRUCTOR
	------------------------------------------

	public User : String * String ==> User
	User(usernameExt, passwordExt) == 
		(
			username := usernameExt;
			password := passwordExt;
			numberOfUsers := numberOfUsers + 1;
			ID := numberOfUsers;
			loggedIn := false;
		)
		pre usernameExt <> "" and passwordExt <> "";
		
	------------------------------------------
	-- ACCESSOR METHODS
	------------------------------------------
		
	public getUserID: () ==> nat1
	getUserID() == 
	(
		return ID;
	);
	
	public getUsername: () ==> String
	getUsername() == 
	(
		return username;
	);
		
	public getRating: () ==> Float
	getRating() ==
	(
		return rating;
	);
	
	public getReviews: () ==> set of Review
	getReviews() ==
	(
		return reviews;
	);
		
	public isLoggedIn: () ==> bool
	isLoggedIn() ==
	(
		return loggedIn;
	);
	
	-- abstract function to check what type the user is (seller or customer)
	public getType: () ==> UserType
	getType() == is subclass responsibility;
	
	public static getNumberOfUsers: () ==> int
	getNumberOfUsers() ==
	(
		return numberOfUsers;
	);
	
	------------------------------------------
	-- MODIFIER METHODS
	------------------------------------------
	
	public setNewUsername: String ==> ()
	setNewUsername(newUsername) ==
	(
		username := newUsername;
	)
	pre newUsername <> "" and loggedIn = true
	post username = newUsername;
	
	public setNewPassword: String ==> ()
	setNewPassword(newPassword) ==
	(
		password := newPassword;
	)
	pre newPassword <> "" and loggedIn = true
	post password = newPassword;
	
	public addReview: Review ==> ()
	addReview(userReview) ==
	(
		reviews := reviews union {userReview};
		updateRating();
	)
	pre userReview.getAuthor() <> self;
		
	public checkCredentials: String ==> bool
	checkCredentials(inputPassword) ==
	( 
		if password = inputPassword
		then (
			loggedIn := true;
			return true;
		);
		return false;
	);
	
	public logIn: () ==> ()
	logIn() ==
	(
		loggedIn := true;
	)
	pre loggedIn = false
	post loggedIn = true;
	
	public logOut: () ==> ()
	logOut() ==
	(
		loggedIn := false;
	)
	pre loggedIn = true
	post loggedIn = false;
	
		-- This operation updates the average rating of the product
	private updateRating: () ==> ()
	updateRating() ==
	(
		dcl allRatingsSum : nat := 0, numRatings : nat := 0;
		for all r in set reviews do
		(
			allRatingsSum := allRatingsSum + r.getClassification();
			numRatings := numRatings + 1;
		);
		rating := calculateRating(numRatings, allRatingsSum);
	);
		
functions
	
	--this function calculates the average product rating
	private calculateRating: nat * nat -> Float
	calculateRating(numReviews, reviewsRatings) ==
	(
		if numReviews = 0 then 0
		else 
			reviewsRatings / numReviews
	);
	
traces

end User