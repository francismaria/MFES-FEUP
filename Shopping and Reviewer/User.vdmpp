class User
--abstract class

types
	public String = seq of char;
	public Date :: year : nat1
								 month : nat1
								 day : nat1		
	inv d == d.month <= 12 and d.year >= 0
			and d.day < 31;
	
	public static UserType = <SELLER> | <COSTUMER>;
	
	
values
	--constantes
	
instance variables
	private ID : nat1 := 1;
	private username : String;
	private password : String;
	
	private static numberOfUsers : int := 0; 
	
	inv ID <= numberOfUsers and ID > 0;
	
operations
	------------------------------------------
	-- CONSTRUCTOR
	------------------------------------------

	public User : String * String ==> User
	User(usernameExt, passwordExt) == 
		(
			username := usernameExt;
			password := passwordExt;
			numberOfUsers := numberOfUsers + 1;
			ID := numberOfUsers;
		)
		pre usernameExt <> "" and passwordExt <> "";
		
	------------------------------------------
	-- ACCESSOR METHODS
	------------------------------------------
		
	public getUserID: () ==> nat1
	getUserID() == 
		return ID;
	
	public getUsername: () ==> String
	getUsername() == 
		return username;
	
	-- abstract function to check what type the user is (seller or customer)
	public getType: () ==> UserType
	getType() == is subclass responsibility;
	
	public static getNumberOfUsers: () ==> int
	getNumberOfUsers() ==
	(
		return numberOfUsers;
	);
	
	------------------------------------------
	-- MODIFIER METHODS
	------------------------------------------
	
	public setNewUsername: String ==> ()
	setNewUsername(newUsername) ==
	(
		username := newUsername;
	)
	pre newUsername <> ""
	post username = newUsername;
	
		
	public setNewPassword: String ==> ()
	setNewPassword(newPassword) ==
	(
		password := newPassword;
	)
	pre newPassword <> ""
	post password = newPassword;
		
		
functions
	--verificar se palavra-passe Ã© segura
traces

end User