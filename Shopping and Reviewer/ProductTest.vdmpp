class ProductTest is subclass of MyTest
types
values
instance variables
	private numProds : int := 0;
	
operations
	-------------------------------------------------------------
	-- Tests: 
	--		: the creation of a new product.
	--		: the retrieval of the product ID.
	-------------------------------------------------------------
	private createNewProduct: () ==> ()
	createNewProduct() ==
	(
		dcl prod : Product;
		prod := new Product("p1", "description1", 12.99);
		numProds := numProds+1;
		
		assert(prod.getID() = numProds);
	);
	
		-------------------------------------------------------------
		-- Tests: 
		--		: the retrieval of the product ID.
		--		: the retrieval of the product name.
		--		: the retrieval of the product quantity.
		--		: the retrieval of the product description.
		--		: the retrieval of the product price.
		-------------------------------------------------------------
	private checkInformation: () ==> ()
	checkInformation() ==
	(
		dcl prod : Product := new Product("p1", "description1", 12.99);
		numProds := numProds+1;
		
		assert(prod.getID() = numProds);
		assert(prod.getName() = "p1");
		assert(prod.getQuantity() = 1);
		assert(prod.getDescription() = "description1");
		assert(prod.getPrice() = 12.99);
	);
	
	-------------------------------------------------------------
	-- Tests: 
	--		: the successful update of the product rating.
	--	* the product rating is only updated when a new review
	--	* is added to the product.
	-------------------------------------------------------------
	private checkRating: () ==> ()
	checkRating() ==
	(
		dcl prod : Product, review: Review, review2: Review,
			costumer : Costumer, costumer2 : Costumer;
		prod := new Product("p1", "description1", 12.99);
		numProds := numProds+1;
		
		costumer := new Costumer("TestCostumer", "password1");
		costumer2 := new Costumer("TestCostumer2", "password2");
		review := new Review("Good product", 4, costumer);
		review2 := new Review("Disappointed with this product", 2, costumer);
		
		assert(prod.getRating() = 0);
		prod.addReview(review);
		assert(prod.getRating() = 4.0);
		prod.addReview(review2);
		assert(prod.getRating() = 3.0);
	);
	
	-------------------------------------------------------------
	-- Tests: 
	--		: the changing of the price of a product
	-------------------------------------------------------------
	private changePrice: () ==> ()
	changePrice() ==
	(
		dcl prod : Product := new Product("p1", "description1", 12.99);
		numProds := numProds+1;
		
		assert(prod.getPrice() = 12.99);
		prod.changePrice(11.99);
		assert(prod.getPrice() = 11.99);
	);
	
	-------------------------------------------------------------
	-- Tests: 
	--		: the changing of the quantity of a product
	--		: the quantity increment and decrement
	-------------------------------------------------------------
	private changeQuantity: () ==> ()
	changeQuantity() ==
	(
		dcl prod : Product := new Product("p1", "description1", 12.99);
		numProds := numProds+1;
		
		assert(prod.getQuantity() = 1);
		prod.incrementQuantity();
		assert(prod.getQuantity() = 2);
		prod.decrementQuantity(1);
		assert(prod.getQuantity() = 1);
	);

	-------------------------------------------------------------
	-- Tests: 
	--		: if two products are the same
	-------------------------------------------------------------	
	private areEqual: () ==> ()
	areEqual() ==
	(
		dcl prod : Product, prod2 : Product;
		prod := new Product("p1", "description1", 12.99);
		prod2 := new Product("p1", "description1", 12.99);
		
		assert(prod.isEqual(prod2));
	);
	
	--ENTRY POINT
	public static main: () ==> ()
	main() ==
	(
		dcl test : ProductTest := new ProductTest();
		
		test.createNewProduct();
		test.checkInformation();
		test.checkRating();
		test.changePrice();
		test.changeQuantity();
		test.areEqual();
	);
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end ProductTest